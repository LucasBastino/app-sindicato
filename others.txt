func (c *Controller) updateUser(w http.ResponseWriter, r *http.Request) {
	id := r.PathValue("id")
	var member models.Member
	json.NewDecoder(r.Body).Decode(&member)
	update, err := c.DB.Query(fmt.Sprintf("UPDATE member SET name = '%v', age = '%v' WHERE idMember = '%v' ", member.Name, member.DNI, id))
	if err != nil {
		fmt.Println("error updating Member")
		panic(err)
	}
	body, err := io.ReadAll(r.Body)
	if err != nil {
		fmt.Print("error reading body")
		log.Panic(err)
	}
	fmt.Println(body)
	fmt.Println(string(body))
	// update.Close()
}

funcmap := map[string]interface{}{
	"Imprimir": ImprimirAlgo,
}
tmpl, err := template.New("tmplUsers").Funcs(funcmap).ParseFiles("src/views/index.html")
if err != nil {
	fmt.Println("error creating template")
	log.Panicln(err.Error())
}

Para leer un archivo y mandarlo al DOM

file, err := os.ReadFile("src/views/getList.html")
	if err != nil {
		fmt.Println("error reading file getList.html")
		panic(err)
	}
	strFile := string(file)
	tmpl := template.Must(template.New("listTmpl").Parse(strFile))
	tmpl.Execute(w, members)
	

Para leer un string y mandarlo al DOM	

func returnList() string {
	return `
    <table class="table ">
        <tr>
            <th>Afiliado</th>
            <th>DNI</th>
        </tr>

        {{range $_, $member := .}}
        <tr>
            <td>{{$member.Name}} </td>
            <td>{{$member.DNI}} </td>

            <td><form action="/member/{{$member.IdMember}}/delete" method="DELETE"><button type="submit" onclick="jsFunc()" class="btn-danger">Eliminar</button></td>

            </form>     </tr>
        {{end}}

    </table>`
}